package src.jicheng;

/**
 *
 * 接口思想(类似usb)
 * 1. 接口的出现对功能实现了扩展
 * 2. 接口的出现定义了规则 暴露规则
 * 3. 接口的出现 降低耦合性(解耦)
 *
 * 接口的出现: 完成了解耦, 说明有两方
 * 一方在使用这个规则
 * 另外一个方在使用这个规则
 *
 */

/**
 * 接口和抽象(答疑)
 * 接口和抽象类的区别
 *
 * 描述事物
 * 犬 按照功能分类(警犬..导盲..宠物..缉毒犬)
 *
 * 犬:
 *  吼叫();功能不具体 不知道怎么叫(); 不同叫声不同事情
 *  吃饭()
 *
 *  abstract 犬{
 *      public abstract 吃饭();
 *      public abstract 吼叫();
 *      public void 缉毒(); ??? 导盲犬也缉毒?
 *  }
 *
 *  犬里面都是抽象方法 应该定义成 接口 还是类?(实现 还是继承)
 *
 *  思考一下 缉毒的不一定是犬 也可能是机器 / 人
 *
 *  那么这时候 缉毒这个功能就定义为 接口比较合适;
 *  // 加入定位为类 因为不仅仅在改类
 *
 *  class 缉毒犬 extends 犬{
 *      public void 吃饭();
 *      public void 吼叫();
 *      public void 缉毒();
 *  }
 *
 *  定义缉毒类
 *  abstract class 缉毒{
 *      public abstract void 缉毒();
 *  }
 *
 *  缉毒犬 既需要拥有犬的功能 也需要缉毒的功能;
 *  无法直接多继承
 *  是否可以多实现?可以的
 *  犬是接口,缉毒接口.缉毒犬多实现即可
 *
 *
 *  核心:
 *  定义类/接口;
 *  什么是类?接口?
 *
 *  类(尤其父类)在描述事物的基本功能 基本属性
 *
 *  接口: 负责描述事物的扩展能力,对事物功能进行的扩展
 *
 *  缉毒犬是犬种的一种(类),它拥有缉毒功能(接口)
 *  is a; 把犬定义成类
 *  缉毒是犬的扩展功能, 可以将缉毒定义成接口;
 *
 *  abstract 犬{
 *      public abstract 吃饭();
 *      public abstract 吼叫();
 *  }
 *
 *  interface 缉毒able{
 *      public abstract void缉毒();
 *  }
 *
 *  class 缉毒犬 extends 犬 implements 缉毒able{
 *      public void 吃饭(){
 *         code ...
 *      };
 *      public void 吼叫(){};
 *      public void 缉毒(){};
 *  }
 *
 *  小结:
 *  1. 抽象类是描述事物的基本功能,可以定义非抽象的方法;
 *   接口定义的只能是抽象方法
 *  2. 类与类之间是继承关系 is - a 关系
 *  3. 类与接口之间是实现关系 like - a 关系
 *
 *
 */
public class jiekousixiang65 {
}
